<!DOCTYPE html>
<html lang="en" class="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Zenqis Terminal - Access Page</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
    <style>
        /* Custom styles to match the original component */
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
        .tab-trigger {
            transition: all 0.2s ease;
        }
        .tab-trigger.active {
            background: rgba(255, 255, 255, 0.1);
            color: white;
        }
        .spinner {
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-top: 2px solid white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .animate-spin {
            animation: spin 1s linear infinite;
        }
        .hidden {
            display: none !important;
        }
        .flex {
            display: flex;
        }
        .items-center {
            align-items: center;
        }
        .justify-center {
            justify-content: center;
        }
        .min-h-screen {
            min-height: 100vh;
        }
        .bg-background {
            background-color: hsl(var(--background));
        }
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 16px;
            border-radius: 8px;
            color: white;
            z-index: 1000;
            animation: slideIn 0.3s ease;
        }
        .toast.success {
            background: #10b981;
        }
        .toast.error {
            background: #ef4444;
        }
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
    </style>
</head>
<body class="bg-gradient-to-br from-black via-gray-900 to-purple-900">
    <!-- Loading Screen -->
    <div id="loading-screen" class="min-h-screen bg-background flex items-center justify-center">
        <div class="spinner"></div>
    </div>

    <!-- Main Content -->
    <div id="main-content" class="min-h-screen bg-gradient-to-br from-black via-gray-900 to-purple-900 flex items-center justify-center p-4 hidden">
        <div class="w-full max-w-sm space-y-6">
            <div class="text-center space-y-3">
                <div class="flex items-center justify-center mb-4">
                    <div class="bg-white/5 backdrop-blur-sm rounded-lg p-2 border border-white/10">
                        <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"/>
                        </svg>
                    </div>
                </div>
                <h1 class="text-2xl font-bold tracking-tight text-white">Zenqis Terminal</h1>
                <p class="text-white/60 text-xs font-medium tracking-wider uppercase">
                    LOG IN
                </p>
            </div>

            <div class="bg-slate-800/30 backdrop-blur-lg rounded-xl border border-slate-700/30 shadow-2xl p-6">
                <!-- Tabs Navigation -->
                <div class="grid w-full grid-cols-3 bg-transparent border-0 mb-4">
                    <button id="login-tab-trigger" class="tab-trigger active text-white border-0 p-2 rounded flex items-center justify-center space-x-2" onclick="switchTab('login')">
                        <i data-lucide="log-in" class="h-4 w-4"></i>
                        <span>Login</span>
                    </button>
                    <button id="signup-tab-trigger" class="tab-trigger text-white/70 border-0 p-2 rounded flex items-center justify-center space-x-2" onclick="switchTab('signup')">
                        <i data-lucide="user-plus" class="h-4 w-4"></i>
                        <span>Sign Up</span>
                    </button>
                    <button id="access-tab-trigger" class="tab-trigger text-white/70 border-0 p-2 rounded flex items-center justify-center space-x-2" onclick="switchTab('access')">
                        <i id="access-icon" data-lucide="lock" class="h-4 w-4"></i>
                        <span id="access-text">Request Access</span>
                    </button>
                </div>

                <!-- Login Tab -->
                <div id="login-tab" class="tab-content active space-y-4">
                    <button 
                        type="button" 
                        class="w-full bg-slate-700/50 hover:bg-slate-700/70 text-white border border-slate-600/50 h-11 rounded-lg text-sm font-medium flex items-center justify-center space-x-2"
                        data-testid="button-google-login"
                    >
                        <svg class="h-4 w-4" viewBox="0 0 24 24">
                            <path fill="currentColor" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                            <path fill="currentColor" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                            <path fill="currentColor" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                            <path fill="currentColor" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                        </svg>
                        <span>Continue with Google</span>
                    </button>

                    <div class="relative">
                        <div class="absolute inset-0 flex items-center">
                            <div class="w-full border-t border-slate-600/50"></div>
                        </div>
                        <div class="relative flex justify-center text-xs">
                            <span class="bg-slate-800/30 px-3 text-white/50">or</span>
                        </div>
                    </div>
                    
                    <form id="login-form" class="space-y-3">
                        <input
                            id="login-username"
                            type="text"
                            placeholder="Username"
                            required
                            class="w-full bg-slate-700/30 border border-slate-600/50 text-white placeholder:text-slate-400 h-11 rounded-lg backdrop-blur-sm focus:border-blue-400 focus:ring-1 focus:ring-blue-400 px-3"
                            data-testid="input-login-username"
                        />
                        <input
                            id="login-password"
                            type="password"
                            placeholder="Password"
                            required
                            class="w-full bg-slate-700/30 border border-slate-600/50 text-white placeholder:text-slate-400 h-11 rounded-lg backdrop-blur-sm focus:border-blue-400 focus:ring-1 focus:ring-blue-400 px-3"
                            data-testid="input-login-password"
                        />
                        
                        <div class="flex items-center justify-between text-xs">
                            <label class="flex items-center text-slate-400">
                                <input type="checkbox" class="mr-2 rounded bg-slate-700 border-slate-600" />
                                Remember me
                            </label>
                            <button type="button" class="text-slate-400 hover:text-white p-0 h-auto text-xs">
                                Forgot Password
                            </button>
                        </div>
                        
                        <button 
                            type="submit" 
                            id="login-submit"
                            class="w-full bg-green-600 hover:bg-green-700 text-white h-11 font-medium rounded-lg transition-all flex items-center justify-center space-x-2"
                            data-testid="button-login"
                        >
                            <i data-lucide="log-in" class="h-4 w-4"></i>
                            <span>Sign in</span>
                        </button>
                    </form>

                    <div class="text-center">
                        <p class="text-slate-400 text-xs">
                            Don't have an account? <button onclick="switchTab('signup')" class="text-white hover:text-blue-400 p-0 h-auto text-xs font-medium">Sign Up</button>
                        </p>
                    </div>
                </div>

                <!-- Signup Tab -->
                <div id="signup-tab" class="tab-content space-y-4">
                    <button 
                        type="button" 
                        class="w-full bg-slate-700/50 hover:bg-slate-700/70 text-white border border-slate-600/50 h-11 rounded-lg text-sm font-medium flex items-center justify-center space-x-2"
                        data-testid="button-google-signup"
                    >
                        <svg class="h-4 w-4" viewBox="0 0 24 24">
                            <path fill="currentColor" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                            <path fill="currentColor" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                            <path fill="currentColor" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                            <path fill="currentColor" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                        </svg>
                        <span>Continue with Google</span>
                    </button>

                    <div class="relative">
                        <div class="absolute inset-0 flex items-center">
                            <div class="w-full border-t border-slate-600/50"></div>
                        </div>
                        <div class="relative flex justify-center text-xs">
                            <span class="bg-slate-800/30 px-3 text-white/50">or</span>
                        </div>
                    </div>
                    
                    <form id="signup-form" class="space-y-3">
                        <input
                            id="signup-username"
                            type="text"
                            placeholder="Username"
                            required
                            class="w-full bg-slate-700/30 border border-slate-600/50 text-white placeholder:text-slate-400 h-11 rounded-lg backdrop-blur-sm focus:border-blue-400 focus:ring-1 focus:ring-blue-400 px-3"
                            data-testid="input-signup-username"
                        />
                        <input
                            id="signup-wa"
                            type="tel"
                            placeholder="WhatsApp Number (628123456789)"
                            required
                            class="w-full bg-slate-700/30 border border-slate-600/50 text-white placeholder:text-slate-400 h-11 rounded-lg backdrop-blur-sm focus:border-blue-400 focus:ring-1 focus:ring-blue-400 px-3"
                            data-testid="input-signup-wa"
                        />
                        <input
                            id="signup-password"
                            type="password"
                            placeholder="Password (min 6 characters)"
                            required
                            minlength="6"
                            class="w-full bg-slate-700/30 border border-slate-600/50 text-white placeholder:text-slate-400 h-11 rounded-lg backdrop-blur-sm focus:border-blue-400 focus:ring-1 focus:ring-blue-400 px-3"
                            data-testid="input-signup-password"
                        />
                        
                        <button 
                            type="submit" 
                            id="signup-submit"
                            class="w-full bg-green-600 hover:bg-green-700 text-white h-11 font-medium rounded-lg transition-all flex items-center justify-center space-x-2"
                            data-testid="button-signup"
                        >
                            <i data-lucide="user-plus" class="h-4 w-4"></i>
                            <span>Create Account</span>
                        </button>
                    </form>

                    <div class="text-center">
                        <p class="text-slate-400 text-xs">
                            Already have an account? <button onclick="switchTab('login')" class="text-white hover:text-blue-400 p-0 h-auto text-xs font-medium">Sign In</button>
                        </p>
                    </div>
                </div>

                <!-- Special/Request Access Tab -->
                <div id="access-tab" class="tab-content space-y-4">
                    <!-- Special Access Content -->
                    <div id="special-access-content" class="space-y-4 hidden">
                        <div class="bg-green-500/10 border border-green-500/20 rounded-lg p-4">
                            <div class="flex items-center gap-2">
                                <i data-lucide="unlock" class="h-4 w-4 text-green-400"></i>
                                <p class="text-green-100 text-sm">
                                    Special Access is enabled. Enter your username to get instant access.
                                </p>
                            </div>
                        </div>
                        <form id="special-form" class="space-y-4">
                            <input
                                id="special-username"
                                type="text"
                                placeholder="Enter your username"
                                required
                                class="w-full bg-slate-700/30 border border-slate-600/50 text-white placeholder:text-slate-400 h-11 rounded-lg backdrop-blur-sm focus:border-blue-400 focus:ring-1 focus:ring-blue-400 px-3"
                                data-testid="input-special-username"
                            />
                            <button 
                                type="submit" 
                                id="special-submit"
                                class="w-full bg-green-600 hover:bg-green-700 text-white h-11 font-medium rounded-lg transition-all flex items-center justify-center space-x-2"
                                data-testid="button-special-login"
                            >
                                <i data-lucide="unlock" class="h-4 w-4"></i>
                                <span>Get Special Access</span>
                            </button>
                        </form>
                    </div>

                    <!-- Special Access Disabled Content -->
                    <div id="special-disabled-content" class="text-center py-8 space-y-4">
                        <i data-lucide="lock" class="h-12 w-12 mx-auto text-red-400/70 mb-4"></i>
                        <div class="space-y-2">
                            <p class="text-red-100 font-medium">Special Access is currently disabled</p>
                            <p class="text-gray-400 text-sm">You need admin approval to access the terminal.</p>
                        </div>
                        <button 
                            onclick="switchTab('request')"
                            class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2 mx-auto"
                            data-testid="button-switch-to-request"
                        >
                            <i data-lucide="lock" class="h-4 w-4"></i>
                            <span>Request Access</span>
                        </button>
                    </div>

                    <!-- Request Access Content -->
                    <div id="request-access-content">
                        <div class="bg-blue-500/10 border border-blue-500/20 rounded-lg p-4 mb-4">
                            <div class="flex items-center gap-2">
                                <i data-lucide="lock" class="h-4 w-4 text-blue-400"></i>
                                <p class="text-blue-100 text-sm">
                                    Submit an access request and wait for admin approval.
                                </p>
                            </div>
                        </div>
                        
                        <form id="request-form" class="space-y-4">
                            <input
                                id="request-username"
                                type="text"
                                placeholder="Your username"
                                required
                                class="w-full bg-slate-700/30 border border-slate-600/50 text-white placeholder:text-slate-400 h-11 rounded-lg backdrop-blur-sm focus:border-blue-400 focus:ring-1 focus:ring-blue-400 px-3"
                                data-testid="input-request-username"
                            />
                            <textarea
                                id="request-note"
                                placeholder="Reason for access request (max 500 characters)"
                                maxlength="500"
                                rows="4"
                                class="w-full bg-slate-700/30 border border-slate-600/50 text-white placeholder:text-slate-400 rounded-lg backdrop-blur-sm focus:border-blue-400 focus:ring-1 focus:ring-blue-400 px-3 py-2 resize-none"
                                data-testid="textarea-request-note"
                            ></textarea>
                            <div class="text-xs text-slate-400">
                                <span id="char-count">0</span>/500 characters
                            </div>
                            <button 
                                type="submit" 
                                id="request-submit"
                                class="w-full bg-blue-600 hover:bg-blue-700 text-white h-11 font-medium rounded-lg transition-all flex items-center justify-center space-x-2"
                                data-testid="button-request-access"
                            >
                                <i data-lucide="send" class="h-4 w-4"></i>
                                <span>Submit Request</span>
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Application state
        let settings = { specialAccessEnabled: false };
        let isLoading = true;
        let activeTab = 'login';
        
        // Form states
        let loginForm = { username: '', password: '', isSubmitting: false };
        let signupForm = { username: '', password: '', waNumber: '', isSubmitting: false };
        let specialForm = { username: '', isSubmitting: false };
        let requestForm = { username: '', note: '', isSubmitting: false };

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            lucide.createIcons();
            fetchSettings();
            setupEventListeners();
        });

        // Fetch settings on component mount
        async function fetchSettings() {
            try {
                const response = await fetch('/public/settings');
                if (response.ok) {
                    const data = await response.json();
                    settings = data;
                    updateAccessTab();
                }
            } catch (error) {
                console.error('Error fetching settings:', error);
            } finally {
                isLoading = false;
                document.getElementById('loading-screen').classList.add('hidden');
                document.getElementById('main-content').classList.remove('hidden');
            }
        }

        // Update access tab based on settings
        function updateAccessTab() {
            const accessIcon = document.getElementById('access-icon');
            const accessText = document.getElementById('access-text');
            const specialContent = document.getElementById('special-access-content');
            const specialDisabledContent = document.getElementById('special-disabled-content');
            const requestContent = document.getElementById('request-access-content');

            if (settings.specialAccessEnabled) {
                accessIcon.setAttribute('data-lucide', 'unlock');
                accessText.textContent = 'Special Access';
                specialContent.classList.remove('hidden');
                specialDisabledContent.classList.add('hidden');
                requestContent.classList.add('hidden');
            } else {
                accessIcon.setAttribute('data-lucide', 'lock');
                accessText.textContent = 'Request Access';
                specialContent.classList.add('hidden');
                specialDisabledContent.classList.remove('hidden');
                requestContent.classList.remove('hidden');
            }
            
            lucide.createIcons();
        }

        // Setup event listeners
        function setupEventListeners() {
            // Login form
            document.getElementById('login-form').addEventListener('submit', handleLogin);
            
            // Signup form
            document.getElementById('signup-form').addEventListener('submit', handleSignup);
            
            // Special access form
            document.getElementById('special-form').addEventListener('submit', handleSpecialLogin);
            
            // Request access form
            document.getElementById('request-form').addEventListener('submit', handleRequestAccess);
            
            // Character counter for request note
            document.getElementById('request-note').addEventListener('input', function(e) {
                document.getElementById('char-count').textContent = e.target.value.length;
            });
        }

        // Switch tabs
        function switchTab(tabName) {
            // Handle special case for request access
            if (tabName === 'request') {
                tabName = 'access';
                // Show request content only
                document.getElementById('special-access-content').classList.add('hidden');
                document.getElementById('special-disabled-content').classList.add('hidden');
                document.getElementById('request-access-content').classList.remove('hidden');
            }

            // Update tab triggers
            document.querySelectorAll('.tab-trigger').forEach(trigger => {
                trigger.classList.remove('active');
            });
            document.getElementById(tabName + '-tab-trigger').classList.add('active');

            // Update tab contents
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            document.getElementById(tabName + '-tab').classList.add('active');

            activeTab = tabName;
        }

        // Handle login
        async function handleLogin(e) {
            e.preventDefault();
            const submitButton = document.getElementById('login-submit');
            const username = document.getElementById('login-username').value;
            const password = document.getElementById('login-password').value;
            
            loginForm.isSubmitting = true;
            submitButton.disabled = true;
            submitButton.innerHTML = '<div class="spinner"></div><span>Signing in...</span>';

            try {
                const response = await fetch('/public/login', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    credentials: 'include',
                    body: JSON.stringify({ username, password })
                });

                const data = await response.json();

                if (response.ok) {
                    showToast(data.message || 'Login successful', 'success');
                    setTimeout(() => window.location.href = '/', 1000);
                } else {
                    showToast(data.error || 'Invalid credentials', 'error');
                }
            } catch (error) {
                console.error('Login error:', error);
                showToast('Network error. Please try again.', 'error');
            } finally {
                loginForm.isSubmitting = false;
                submitButton.disabled = false;
                submitButton.innerHTML = '<i data-lucide="log-in" class="h-4 w-4"></i><span>Sign in</span>';
                lucide.createIcons();
            }
        }

        // Handle signup
        async function handleSignup(e) {
            e.preventDefault();
            const submitButton = document.getElementById('signup-submit');
            const username = document.getElementById('signup-username').value;
            const password = document.getElementById('signup-password').value;
            const waNumber = document.getElementById('signup-wa').value;
            
            signupForm.isSubmitting = true;
            submitButton.disabled = true;
            submitButton.innerHTML = '<div class="spinner"></div><span>Creating Account...</span>';

            try {
                const response = await fetch('/public/signup', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ username, password, waNumber })
                });

                const data = await response.json();

                if (response.ok) {
                    showToast(data.message || 'Account created successfully', 'success');
                    document.getElementById('signup-form').reset();
                    switchTab('login');
                } else {
                    showToast(data.error || 'Failed to create account', 'error');
                }
            } catch (error) {
                console.error('Signup error:', error);
                showToast('Network error. Please try again.', 'error');
            } finally {
                signupForm.isSubmitting = false;
                submitButton.disabled = false;
                submitButton.innerHTML = '<i data-lucide="user-plus" class="h-4 w-4"></i><span>Create Account</span>';
                lucide.createIcons();
            }
        }

        // Handle special login
        async function handleSpecialLogin(e) {
            e.preventDefault();
            const submitButton = document.getElementById('special-submit');
            const username = document.getElementById('special-username').value;
            
            specialForm.isSubmitting = true;
            submitButton.disabled = true;
            submitButton.innerHTML = '<div class="spinner"></div><span>Processing...</span>';

            try {
                const response = await fetch('/public/special-login', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    credentials: 'include',
                    body: JSON.stringify({ username })
                });

                const data = await response.json();

                if (response.ok) {
                    if (data.redirect === 'request_submitted') {
                        showToast(data.message || 'Your access request has been submitted to admin for approval.', 'success');
                        switchTab('request');
                        document.getElementById('special-form').reset();
                        return;
                    }
                    
                    showToast(data.message || 'Special access granted!', 'success');
                    setTimeout(() => window.location.href = '/', 1000);
                } else {
                    if (response.status === 403 && data.error === 'Special access is disabled') {
                        showToast('Special access is currently disabled. Please submit a request for approval.', 'error');
                        switchTab('request');
                        return;
                    }
                    
                    showToast(data.error || 'Unable to grant access', 'error');
                }
            } catch (error) {
                console.error('Special login error:', error);
                showToast('Network error. Please try again.', 'error');
            } finally {
                specialForm.isSubmitting = false;
                submitButton.disabled = false;
                submitButton.innerHTML = '<i data-lucide="unlock" class="h-4 w-4"></i><span>Get Special Access</span>';
                lucide.createIcons();
            }
        }

        // Handle request access
        async function handleRequestAccess(e) {
            e.preventDefault();
            const submitButton = document.getElementById('request-submit');
            const username = document.getElementById('request-username').value;
            const note = document.getElementById('request-note').value;
            
            requestForm.isSubmitting = true;
            submitButton.disabled = true;
            submitButton.innerHTML = '<div class="spinner"></div><span>Submitting...</span>';

            try {
                // First check if user is already approved
                const checkResponse = await fetch('/public/check-approval', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ username })
                });

                const checkData = await checkResponse.json();
                
                if (checkResponse.ok && checkData.isApproved) {
                    // User is already approved - try to login them
                    const loginResponse = await fetch('/public/login-approved', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        credentials: 'include',
                        body: JSON.stringify({ username })
                    });

                    const loginData = await loginResponse.json();

                    if (loginResponse.ok) {
                        showToast('Your access has been approved. Logging you in...', 'success');
                        setTimeout(() => window.location.href = '/', 1000);
                        return;
                    } else {
                        console.log('Approved user login failed:', loginData.error);
                    }
                }

                // Regular request access flow
                const response = await fetch('/public/request-access', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ username, note })
                });

                const data = await response.json();

                if (response.ok) {
                    showToast(data.message || 'Please wait for admin approval.', 'success');
                    document.getElementById('request-form').reset();
                    document.getElementById('char-count').textContent = '0';
                } else {
                    showToast(data.error || 'Failed to submit request', 'error');
                }
            } catch (error) {
                console.error('Request access error:', error);
                showToast('Network error. Please try again.', 'error');
            } finally {
                requestForm.isSubmitting = false;
                submitButton.disabled = false;
                submitButton.innerHTML = '<i data-lucide="send" class="h-4 w-4"></i><span>Submit Request</span>';
                lucide.createIcons();
            }
        }

        // Show toast notification
        function showToast(message, type = 'success') {
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.textContent = message;
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.remove();
            }, 5000);
        }
    </script>
</body>
</html>
